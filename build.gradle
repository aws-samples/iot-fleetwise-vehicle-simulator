import java.time.Instant

// Applies BrazilGradle plugin then uses it to setup the build script classpath.
buildscript {
    apply plugin: 'brazil-gradle'
    dependencies {
        classpath brazilGradle.tool("BrazilGradleQualityDefaults")
        classpath brazilGradle.tool('BrazilGradleJavaWrapperGenerator')
        classpath brazilGradle.tool("KotlinGradlePlugin")
        classpath brazilGradle.tool("KotlinTrailsGradle")
        classpath brazilGradle.tool("KtlintGradle")
    }
}

/*
 Applies core Gradle plugins, which are ones built into Gradle itself.
*/
plugins {
    id "java"

    id "jacoco"
}

// BrazilGradleQualityDefaults for enabling brazil specific quality rules and
// reports for other quality plugins. Read more at:
// https://w.amazon.com/bin/view/BrazilGradle/QualityDefaults
apply plugin: "brazil-quality-defaults"

apply plugin: 'brazil-generate-wrapper'

// KotlinTrailsGradle for BrazilGradle support in KotlinGradlePlugin. Read more at:
// https://code.amazon.com/packages/KotlinTrailsGradle/blobs/mainline/--/Readme.md
apply plugin: "kotlintrails"

// Kotlin for compile and unit test of Kotlin source files. Read more at:
// https://kotlinlang.org/docs/reference/using-gradle.html
apply plugin: "kotlin"

// KtlintGradle for style checks and reports of Kotlin source files. Read more at:
// https://github.com/JLLeitschuh/ktlint-gradle/blob/master/README.md
apply plugin: "org.jlleitschuh.gradle.ktlint"

/*
 Configures the Ktlint "org.jlleitschuh.gradle.ktlint" plugin. Remove this and
 the plugin if you want to skip these checks and report generation.
*/
ktlint {
    reporters {
        reporter(org.jlleitschuh.gradle.ktlint.reporter.ReporterType.PLAIN)
        reporter(org.jlleitschuh.gradle.ktlint.reporter.ReporterType.CHECKSTYLE)
    }
    ignoreFailures.set(false)
}

/*
 Configures the JaCoCo "jacoco" plugin. Remove this if you want to skip
 these checks and report generation.

 Set minimum code coverage to fail build, where 0.01 = 1%.
*/
def excludedPackages = [
        '**/*Module*',
]

coverageReport {
    afterEvaluate {
        project.logger.lifecycle("Code coverage report available here: " +
                "file://${brazilGradle.buildDir}/brazil-documentation/coverage/index.html"
        )
    }
}

check.dependsOn jacocoTestCoverageVerification
jacocoTestCoverageVerification {
    violationRules {
        rule { limit { minimum = 0.00 } }
    }
    afterEvaluate {
        classDirectories.from = files(classDirectories.files.collect {
            fileTree(dir: it, exclude: excludedPackages)
        })
    }
}

// Create Kotlin code coverage badge for code.amazon.com.
def coverageDir = "${brazilGradle.buildDir}/generated-make";
def coverageFile = "coverage-data.txt"
def kotlinFile = "coverage-kotlin.txt"

task createKotlinCoverageData(type: Copy, dependsOn: jacocoTestCoverageVerification) {
    from file("$coverageDir/$coverageFile")
    into file("$coverageDir")
    rename '(.+)-data(.+)', '$1-kotlin$2'
    filter{ String line -> line.replaceAll("java", "kotlin") }
}

task updateCoverageData (type: Copy, dependsOn: createKotlinCoverageData) {
    from file("$coverageDir/$kotlinFile")
    into file("$coverageDir")
    rename '(.+)-kotlin(.+)', '$1-data$2'
}
check.dependsOn(updateCoverageData)

/*
 Resolve build, test, tool, and runtime dependencies using BrazilGradle.
*/
dependencies {
    runtimeOnly brazilGradle.run()
    implementation brazilGradle.build()
    testImplementation brazilGradle.testbuild()
    ktlint brazilGradle.tool("Ktlint")
}

compileJava {
    sourceCompatibility = '1.8'
    targetCompatibility = '1.8'
}

compileKotlin {
    kotlinOptions {
        jvmTarget = "1.8"
    }
}

compileTestKotlin {
    kotlinOptions {
        jvmTarget = "1.8"
    }
}

/*
 Specifies that JUnit Platform (a.k.a. JUnit 5) should be used to execute tests.

 For mixed JUnit 4 and 5 tests, add 'JUnit-4-12-migration = 5.x;' to
 test-dependencies in Config.
*/
test {
    useJUnitPlatform()

    // show standard out and standard error of the test JVM(s) on the console
    testLogging {
        events = ["passed", "failed", "skipped"]
        showStandardStreams true
        exceptionFormat "full"
    }

    maxParallelForks = Runtime.runtime.availableProcessors().intdiv(2) ?: 1
}

task createProperties(type: WriteProperties) {
    outputFile "$buildDir/resources/main/version.properties"
    property "version", brazilGradle.path("pkg.namefullversion")
    property "buildTime", Instant.now().toEpochMilli()
}
classes.dependsOn createProperties

task generateCliWrapper(type: com.amazon.brazil.gradle.launcher.GenerateWrapperTask) {
    target "$brazilGradle.buildDir/bin/vehicle-simulator"
    main 'com.amazonaws.iot.autobahn.vehiclesimulator.cli.VehicleSimulatorCommand'
}
build.dependsOn generateCliWrapper
