// Applies BrazilGradle plugin then uses it to setup the build script classpath.
buildscript {
    apply(plugin = "brazil-gradle")
    val brazilGradle = the<com.amazon.brazil.gradle.BrazilPluginExtension>()
    dependencies {
        brazilGradle.tool("BrazilGradleQualityDefaults").forEach { classpath(it) }
        brazilGradle.tool("KotlinGradlePlugin").forEach { classpath(it) }
        brazilGradle.tool("KotlinTrailsGradle").forEach { classpath(it) }
        brazilGradle.tool("KtlintGradle").forEach { classpath(it) }
    }
}

/*
 Applies core Gradle plugins, which are ones built into Gradle itself.
*/
plugins {
    // Java for compile and unit test of Java source files. Read more at:
    // https://docs.gradle.org/current/userguide/java_plugin.html
    java

    // JaCoCo for coverage metrics and reports of Java source files. Read more at:
    // https://docs.gradle.org/current/userguide/jacoco_plugin.html
    jacoco
}

/*
 Applies community Gradle plugins, usually added as build-tools in Config.
*/

// BrazilGradleQualityDefaults for enabling brazil specific quality rules and
// reports for other quality plugins. Read more at:
// https://w.amazon.com/bin/view/BrazilGradle/QualityDefaults
apply(plugin = "brazil-quality-defaults")

// KotlinTrailsGradle for BrazilGradle support in KotlinGradlePlugin. Read more at:
// https://code.amazon.com/packages/KotlinTrailsGradle/blobs/mainline/--/Readme.md
apply(plugin = "kotlintrails")

// Kotlin for compile and unit test of Kotlin source files. Read more at:
// https://kotlinlang.org/docs/reference/using-gradle.html
apply(plugin = "kotlin")

// KtlintGradle for style checks and reports of Kotlin source files. Read more at:
// https://github.com/JLLeitschuh/ktlint-gradle/blob/master/README.md
apply(plugin = "org.jlleitschuh.gradle.ktlint")

// SpotBugs for quality checks and reports of Java and Kotlin source files. Read more at:
// https://spotbugs.readthedocs.io/en/stable/gradle.html
apply(plugin = "com.github.spotbugs")

/*
 Kotlin plugin's default project layout is 'src/main/kotlin' and 'src/test/kotlin'.
 Uncomment below if you instead want to use 'src/kotlin' and 'tst/kotlin'.

sourceSets["main"].withConvention(org.jetbrains.kotlin.gradle.plugin.KotlinSourceSet::class) {
    kotlin.srcDir("src/kotlin")
}
sourceSets["test"].withConvention(org.jetbrains.kotlin.gradle.plugin.KotlinSourceSet::class) {
    kotlin.srcDir("tst/kotlin")
}
*/

/*
 Configures the Ktlint "org.jlleitschuh.gradle.ktlint" plugin. Remove this and
 the plugin if you want to skip these checks and report generation.
*/
configure<org.jlleitschuh.gradle.ktlint.KtlintExtension> {
    reporters {
        reporter(org.jlleitschuh.gradle.ktlint.reporter.ReporterType.PLAIN)
        reporter(org.jlleitschuh.gradle.ktlint.reporter.ReporterType.CHECKSTYLE)
    }
    ignoreFailures.set(false)
}

/*
 Configures the SpotBugs "com.github.spotbugs" plugin. Remove this and the
 plugin to skip these checks and report generation.
*/
configure<com.github.spotbugs.snom.SpotBugsExtension> {
    ignoreFailures.set(false)
}
/*
  The SpotBugs Gradle Plugin generates a task for each sourceSet generated by
  Gradle Java Plugin. For instance, if you have two sourceSets main and test,
  this plugin will generates two tasks: spotbugsMain and spotbugsTest.
  Uncomment below if you want to skip checks for test code.

tasks.named<com.github.spotbugs.snom.SpotBugsTask>("spotbugsTest") {
    ignoreFailures = true
}
*/

/*
 Configures the JaCoCo "jacoco" plugin. Remove this if you want to skip
 these checks and report generation.

 Set minimum code coverage to fail build, where 0.01 = 1%.
*/
tasks {
    jacocoTestCoverageVerification {
        violationRules {
            rule { limit { minimum = BigDecimal.valueOf(0.01) } }
        }
    }
    check {
        dependsOn(jacocoTestCoverageVerification)
    }
}

/*
  Resolve build, test, tool, and runtime dependencies using BrazilGradle.
*/
dependencies {
    brazilGradle.run().forEach { runtimeOnly(it) }
    brazilGradle.build().forEach { implementation(it) }
    brazilGradle.testbuild().forEach { testImplementation(it) }
    brazilGradle.tool("Ktlint").forEach { "ktlint"(it) }
}

/*
 Specifies that JUnit Platform (a.k.a. JUnit 5) should be used to execute tests.

 For mixed JUnit 4 and 5 tests, add 'JUnit-4-12-migration = 5.x;' to
 test-dependencies in Config.
*/
tasks.withType<Test> {
    useJUnitPlatform()
}
